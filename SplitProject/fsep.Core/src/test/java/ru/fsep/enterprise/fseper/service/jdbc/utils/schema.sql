DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS post;
DROP TABLE IF EXISTS task;
DROP TABLE IF EXISTS step;

CREATE TABLE posts (
  info_id INTEGER,
  post_id INTEGER
);

CREATE TABLE tasks (
  task_id INTEGER,
  user_id INTEGER
);

CREATE TABLE users (
	id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
	login VARCHAR(100),
	password_hash VARCHAR(100),
	first_name VARCHAR(100),
	last_name VARCHAR(100),
	rating DOUBLE,
	birthday VARCHAR(100),
	user_role VARCHAR(100),
	photo VARCHAR(100)
);

CREATE TABLE post (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  name VARCHAR(100),
  description VARCHAR(100)
);

CREATE TABLE task (
	id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  privated BOOLEAN,
  description VARCHAR(100),
  due_data DATE,
  finished BOOLEAN
);

CREATE TABLE step (
  id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  description VARCHAR(100),
  tasks_id INTEGER,
  finished BOOLEAN
);

ALTER TABLE posts ADD CONSTRAINT auth_fk1 FOREIGN KEY (info_id) REFERENCES users(id);
ALTER TABLE posts ADD CONSTRAINT auth_fk2 FOREIGN KEY (info_id) REFERENCES post(id);
ALTER TABLE tasks ADD CONSTRAINT auth_fk3 FOREIGN KEY (task_id) REFERENCES task(id);
ALTER TABLE tasks ADD CONSTRAINT auth_fk4 FOREIGN KEY (user_id) REFERENCES users(id);
ALTER TABLE step ADD CONSTRAINT auth_fk7 FOREIGN KEY (tasks_id) REFERENCES task(id);